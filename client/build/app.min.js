var mmommo=function(e){var t={};function i(a){if(t[a]){return t[a].exports}var s=t[a]={i:a,l:false,exports:{}};e[a].call(s.exports,s,s.exports,i);s.l=true;return s.exports}i.m=e;i.c=t;i.d=function(e,t,a){if(!i.o(e,t)){Object.defineProperty(e,t,{configurable:false,enumerable:true,get:a})}};i.r=function(e){Object.defineProperty(e,"__esModule",{value:true})};i.n=function(e){var t=e&&e.__esModule?function t(){return e["default"]}:function t(){return e};i.d(t,"a",t);return t};i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};i.p="";return i(i.s=0)}([function(e,t,i){"use strict";i.r(t);const a={CONNECTION_CLOSED:"ACTION_CONNECTION_CLOSED",PING:"ACTION_PING",PONG:"ACTION_PONG",STATE:"ACTION_STATE",STATE_REQUEST:"ACTION_STATE_REQUEST",MOVE:"ACTION_MOVE",PAINT:"ACTION_PAINT",MAP:"ACTION_MAP",MESSAGE:"ACTION_MESSAGE",NOTICE:"ACTION_NOTICE",MUTE:"ACTION_MUTE",ERROR:"ACTION_ERROR",PEERS:"ACTION_PEERS",PEER_DISCONNECT:"ACTION_PEER_DISCONNECT",SET_NAME:"ACTION_SET_NAME",SET_COLOUR:"ACTION_SET_COLOUR"};class s{constructor(e,t,i){this.x=e||0;this.y=t||0;this.z=i||0}set(e){this.x=e.x;this.y=e.y;this.z=e.z}getJSON(){return{x:this.x,y:this.y,z:this.z}}}const o={global:{maxDataSize:400,maxMessageSize:250,grid:{size:512,step:2.5,playerSpawnRange:96}},client:{emitMovementRate:4,emitMovementPeriod:1,emitPingRate:1,emitPingPeriod:5},server:{limitRequestRate:10,limitRequestPeriod:1,limitSpamRate:5,limitSpamPeriod:5,limitBroadcastRate:8,limitBroadcastPeriod:1,limitBroadcastPaintRate:5,limitBroadcastPaintPeriod:1,userMuteTimeout:10,userMuteTimeoutIncrement:5}};class n{constructor(){this.state={id:null,name:"",p:new s(0,0,0),v:new s(0,0,0),colour:null,ping:"...",cellsColoured:0}}set(e){const t=Object.keys(e);for(var i=0,a=t.length;i<a;++i){const a=t[i];if(a=="p"||a=="v"){this.state[a].set(e[a])}else{this.state[a]=e[a]}}}get(e){if(e=="p"||e=="v"){return this.state[e].getJSON()}else{return this.state[e]}}getPartJSON(e){const t={};for(var i=0,a=e.length;i<a;++i){t[e[i]]=this.get(e[i])}return t}getJSON(){const e={};const t=Object.keys(this.state);for(var i=0,a=t.length;i<a;++i){e[t[i]]=this.get(t[i])}return e}}class r{constructor(e){this.socket=e}send(e,t){if(this.connectionOK()){const i=JSON.stringify({type:e,data:t});this.socket.send(i);return true}else{return false}}setSocket(e){this.socket=e}sendState(e){return this.send(a.STATE,e)}sendPing(){return this.send(a.PING,{timestamp:(new Date).getTime()})}sendPong(){return this.send(a.PONG,{})}sendMessage(e){return this.send(a.MESSAGE,e)}sendMove(e,t){return this.send(a.MOVE,{p:e,v:t})}sendPaint(e,t,i){return this.send(a.PAINT,{x:e,y:t,colour:i})}sendSetName(e){return this.send(a.SET_NAME,{name:e})}sendSetColour(e){return this.send(a.SET_COLOUR,{colour:e})}connectionOK(){return this.socket.readyState===this.socket.OPEN}}class l{constructor(e){this.client=e;this.reconnect={count:0,max:5,timeout:3e3,lock:false};this.connect()}connect(e,t,i){this.socket=new WebSocket(this.client.url);this.socket.binaryType="arraybuffer";this.socket.onopen=(()=>{this.reconnect.count=0;this.client.console.printNotice("Connected.");this.client.onConnect()});this.socket.onmessage=(e=>{this.client.handleMessage(e)});this.socket.onerror=(e=>{console.log("Socket error",e)});this.socket.onclose=(()=>{this.onDisconnect()})}onDisconnect(){if(!this.reconnect.lock){this.reconnect.lock=true;if(++this.reconnect.count<=this.reconnect.max){this.client.console.printNotice(`No connection. Retrying ${this.reconnect.count}/${this.reconnect.max}`);setTimeout(()=>{this.reconnect.lock=false;this.connect()},this.reconnect.timeout)}else{this.client.console.printNotice("Could not connect to server. Try later.")}}}getSocket(){return this.socket}}class h{constructor(e,t,i){this.rate=e;this.period=t;this.interval=t/e;this.age=this.interval;this.event=i}update(e){this.age+=e;if(this.age>=this.interval){this.age-=this.interval;this.event()}}}const d={speed:6,acceleration:.25};function f(e,t){return Math.atan2(Math.sin(t-e),Math.cos(t-e))}function u(e,t,i){return Math.min(i,Math.max(e,t))}class c{constructor(){this.size=o.global.grid.size;this.step=o.global.grid.step;this.bound=this.size*this.step;this.halfBound=this.bound/2;const e=o.global.grid.playerSpawnRange;this.position=new THREE.Vector3;this.position.x=Math.floor(Math.random()*e-e/2)*this.step-this.step/2;this.position.z=Math.floor(Math.random()*e-e/2)*this.step-this.step/2;this.motion=new THREE.Vector3;this.previous={};this.name="";this.disabled=false;this.accel=0;this.colour=65280;this.acceleration=d.acceleration;this.speed=d.speed;this.cell={x:0,y:0};this.diagonalReduction=1/Math.sqrt(2);this.autoMove=false;this.waypoints=[];this.status="";this.keys={};document.onkeydown=(e=>{if(document.body==document.activeElement){this.keys[e.code]=true;this.autoMove=false;this.waypoints=[]}});document.onkeyup=(e=>{this.keys[e.code]=false;this.autoMove=false;this.waypoints=[]})}init(e,t){this.canvas=e;this.camera=t;this.raycaster=new THREE.Raycaster;this.plane=new THREE.Plane(new THREE.Vector3(0,1,0));this.cursor={screen:new THREE.Vector2,position:new THREE.Vector3,cell:new THREE.Vector3};this.registerWaypoint=((e,t)=>{const i=this.waypoints.length-1;e+=this.step/2;t+=this.step/2;if(!(e==this.position.x&&t==this.position.z)&&(i==-1||!(this.waypoints[i].x==e&&this.waypoints[i].z==t))){this.waypoints.push(new THREE.Vector3(e,0,t))}});this.canvas.onmousemove=(e=>{this.cursor.screen.x=e.clientX/this.canvas.width*2-1;this.cursor.screen.y=-(e.clientY/this.canvas.height*2-1);this.raycaster.setFromCamera(this.cursor.screen,this.camera);this.raycaster.ray.intersectPlane(this.plane,this.cursor.position);this.cursor.cell.x=Math.floor(this.cursor.position.x/this.step)*this.step;this.cursor.cell.z=Math.floor(this.cursor.position.z/this.step)*this.step;if(e.which){this.registerWaypoint(this.cursor.cell.x,this.cursor.cell.z)}});this.canvas.onmousedown=(()=>{this.autoMove=false;this.waypoints=[];this.registerWaypoint(this.cursor.cell.x,this.cursor.cell.z)});this.canvas.onmouseup=(()=>{this.autoMove=true})}getGridCell(){this.cell.x=Math.floor(this.position.x/this.step+this.size/2);this.cell.y=Math.floor(this.position.z/this.step+this.size/2);return{x:this.cell.x,y:this.cell.y}}inNewGridCell(){if(this.previous.cell){const e=this.getGridCell();if(!(e.x==this.previous.cell.x&&e.y==this.previous.cell.y)){this.previous.cell=e;return true}else{return false}}else{this.previous.cell=this.getGridCell();return true}}changed(){if(this.previous.position){if(!this.motion.equals(this.previous.motion)||this.motion.x==0&&this.motion.y==0&&this.motion.z==0&&!this.position.equals(this.previous.position)){this.previous.motion.copy(this.motion);this.previous.position.copy(this.position);return true}else{return false}}else{this.previous.position=new THREE.Vector3;this.previous.motion=new THREE.Vector3;return true}}move(e){if(this.autoMove&&this.waypoints.length){const t=this.waypoints[0];const i=new THREE.Vector3(t.x-this.position.x,0,t.z-this.position.z);const a=i.length();const s=i.clone();s.normalize();s.multiplyScalar(this.speed);if(a<s.length()*e){this.waypoints.splice(0,1);if(this.waypoints.length==0){this.autoMove=false;this.position.x=t.x;this.position.z=t.z;this.motion.x=0;this.motion.z=0}else{this.motion=s}}else{this.motion=s}}else{this.motion.x=-(this.keys["KeyA"]||this.keys["ArrowLeft"]?this.speed:0)+(this.keys["KeyD"]||this.keys["ArrowRight"]?this.speed:0);this.motion.z=-(this.keys["KeyW"]||this.keys["ArrowUp"]?this.speed:0)+(this.keys["KeyS"]||this.keys["ArrowDown"]?this.speed:0);if(this.motion.x!=0&&this.motion.z!=0){this.motion.x*=this.diagonalReduction;this.motion.z*=this.diagonalReduction}}if(!(this.motion.x==0&&this.motion.z==0)){this.accel+=(1-this.accel)*this.acceleration}else{this.accel=0}this.position.x+=this.motion.x*e*this.accel;this.position.z+=this.motion.z*e*this.accel;this.position.x=this.position.x>this.halfBound?this.halfBound:this.position.x<-this.halfBound?-this.halfBound:this.position.x;this.position.z=this.position.z>this.halfBound?this.halfBound:this.position.z<-this.halfBound?-this.halfBound:this.position.z}enableInput(){this.disabled=false}disableInput(){this.disabled=true;for(var e in this.keys){if(this.keys.hasOwnProperty(e)){this.keys[e]=false}}}update(e){this.move(e)}}class m{constructor(e){this.id=e;this.name="player";this.colour=null;this.accel=0;this.acceleration=d.acceleration;this.position=new THREE.Vector3;this.motion=new THREE.Vector3;this.cell={x:0,y:0};this.target={position:new THREE.Vector3};this.adjust=.075;this.size=o.global.grid.size;this.step=o.global.grid.step}setInitialPosition(e){this.position.set(e.p.x,e.p.y,e.p.z);this.motion.set(e.v.x,e.v.y,e.v.z);this.target.position.set(e.p.x,e.p.y,e.p.z)}updatePosition(e){this.position.set(e.p.x,e.p.y,e.p.z);this.motion.set(e.v.x,e.v.y,e.v.z)}update(e){if(!(this.motion.x==0&&this.motion.z==0)){this.accel+=(1-this.accel)*this.acceleration}else{this.accel=0}this.position.x+=this.motion.x*e*this.accel;this.position.z+=this.motion.z*e*this.accel;this.target.position.x+=(this.position.x-this.target.position.x)*this.adjust;this.target.position.z+=(this.position.z-this.target.position.z)*this.adjust;this.cell.x=Math.floor(this.position.x/this.step+this.size/2);this.cell.y=Math.floor(this.position.z/this.step+this.size/2)}}class p{constructor(){this.id=null;this.peers={};this.peerCount=0;this.reset=true}setMyId(e){this.id=e}purge(){this.id=null;this.peers={};this.peerCount=0;this.reset=true}add(e){if(e!=this.id){this.peers[e]=new m(e);this.peerCount+=1}}remove(e){if(this.peers[e]){this.peerCount-=1;delete this.peers[e]}}update(e){const t=Object.keys(this.peers);for(var i=0,a=t.length;i<a;++i){this.peers[t[i]].update(e)}}handlePeerDisconnect(e){this.remove(e.id)}handleData(e){for(var t=0,i=e.length;t<i;++t){const i=e[t].id;if(i!=this.id){if(!this.peers[i]){this.add(i)}if(this.reset){this.reset=false;this.peers[i].setInitialPosition(e[t])}else{this.peers[i].updatePosition(e[t])}if(this.peers[i].name!=e[t].name){this.peers[i].name=e[t].name}if(this.peers[i].colour!=e[t].colour){this.peers[i].colour=e[t].colour}}}}getCount(){return this.peerCount}getKeys(){return Object.keys(this.peers)}getPeer(e){return this.peers[e]}getColoursInCell(e,t){const i=Object.keys(this.peers);const a=[];for(var s=0,o=i.length;s<o;++s){if(i[s]!=this.id){const o=this.peers[i[s]];if(o.cell.x==e&&o.cell.y==t&&o.colour!=null){a.push(o.colour)}}}return a}}function A(e){const t=document.createElement("div");for(var i in e){if(e.hasOwnProperty(i)){t[i]=e[i]}}return t}class x{constructor(e){this.client=e;this.limit=12;this.fadeFrom=9;this.active=false;this.el={};this.el.list=document.querySelector(".chat-list__inner");this.el.form=document.querySelector("#chat-form");this.el.input=document.querySelector(".chat-input__input");this.el.form.onsubmit=(e=>{this.submitMessage(e)})}submitMessage(e){e.preventDefault();document.activeElement.blur();if(this.el.input.value.length){this.client.packet.sendMessage(this.el.input.value);this.el.input.value=""}}printMessage(e,t){this.el.list.appendChild(A({className:"chat-list__item",innerHTML:`<span class='bold'>${e}</span> ${t}`}));this.limitChat()}printNotice(e){this.el.list.appendChild(A({className:"chat-list__item",innerHTML:`<span class='error'>${e}</span>`}));this.limitChat()}limitChat(){if(this.el.list.children.length>=this.limit){this.el.list.removeChild(this.el.list.children[0])}var e=0;var t=this.limit+1-this.fadeFrom;for(var i=this.el.list.children.length,a=-1;i>a;--i){if(++e>this.fadeFrom){this.el.list.children[i].style.opacity=1-(e-this.fadeFrom)/t}}}}class F{constructor(){this.overlay=document.querySelector(".help-overlay");this.button=document.querySelector("#help-button");this.elements={colour:document.querySelector(".help-colour"),map:document.querySelector(".help-minimap"),general:document.querySelector(".help-general"),chat:document.querySelector(".help-chat"),player:document.querySelector(".help-player")};this.targets={colour:document.querySelector("#colour-target"),map:document.querySelector("#map-target"),chat:document.querySelector(".chat-list")};this.button.onclick=(()=>{this.toggle()});this.overlay.onclick=(()=>{this.close()})}snapTo(e,t){const i=t.getBoundingClientRect();this.position(e,i.left,i.top)}position(e,t,i){e.style.top=i+"px";e.style.left=t+"px"}close(){this.overlay.classList.remove("active")}toggle(){this.overlay.classList.toggle("active");if(this.overlay.classList.contains("active")){this.position(this.elements.general,16,16);this.position(this.elements.player,(window.innerWidth-300)/2,window.innerHeight/2);this.snapTo(this.elements.colour,this.targets.colour);this.snapTo(this.elements.map,this.targets.map);this.snapTo(this.elements.chat,this.targets.chat)}}}class T{constructor(e){this.client=e;this.createWindow();this.input=this.form.querySelector("input");document.body.appendChild(this.form);window.addEventListener("resize",()=>{if(document.body.contains(this.form)){this.centreForm()}})}closeWindow(){if(document.body.contains(this.form)){document.body.removeChild(this.form)}}error(e){this.form.querySelector(".form-window__notice").innerHTML=e}force(e){this.client.setName(e);this.closeWindow()}onForm(e){e.preventDefault();if(this.input.value.length){this.client.setName(this.input.value);this.closeWindow()}else{this.error("<br />Input is empty.")}}centreForm(){this.form.style.top=window.innerHeight/2-120+"px";this.form.style.left=(window.innerWidth-300)/2-160+"px"}createWindow(){this.form=A({className:"window form-window"});this.form.style.zIndex=150;const e="Name your pencil";const t=A({className:"form-window__title",innerHTML:e});const i=document.createElement("form");const a=document.createElement("input");const s=document.createElement("input");const o=A({className:"form-window__notice"});i.onsubmit=(e=>{this.onForm(e)});a.setAttribute("type","text");a.setAttribute("placeholder","input");a.setAttribute("maxlength",25);s.setAttribute("type","submit");s.setAttribute("value","send");i.appendChild(a);i.appendChild(s);this.form.appendChild(t);this.form.appendChild(i);this.form.appendChild(o);this.centreForm()}}function g(e){var t=0;var i=0;var a=0;for(var s=0,o=e.length;s<o;++s){t+=e[s]>>16&255;i+=e[s]>>8&255;a+=e[s]&255}if(e.length){t=(t/e.length&255)<<16;i=(i/e.length&255)<<8;a=a/e.length&255}return t+i+a}function P(e){var t=e>>16&255;var i=e>>8&255;var a=e&255;t=(t<16?"0":"")+t.toString(16);i=(i<16?"0":"")+i.toString(16);a=(a<16?"0":"")+a.toString(16);return`#${t}${i}${a}`}function E(e,t,i){e=(Math.round(e*255)&255)<<16;t=(Math.round(t*255)&255)<<8;i=Math.round(i*255)&255;return e+t+i}const _=1/3;const y=1/6;const S=2/3;function v(e,t,i){i+=i<0?1:i>1?-1:0;if(i<y){return e+(t-e)*6*i}else if(i<.5){return t}else if(i<S){return e+(t-e)*(S-i)*6}else{return e}}function N(){var e,t,i;const a=Math.random();const s=Math.random();const o=Math.random();if(a!==0){const n=s<.5?s*(1+a):s+a-s*a;const r=2*s-n;e=v(r,n,o+_);i=v(r,n,o);t=v(r,n,o-_)}else{e=i=t=s}return E(e,i,t)}class L{constructor(e){this.client=e;this.target=document.querySelector("#colour-target");document.querySelector("#colour-reroll").onclick=(()=>{this.makeNewColours()});this.makeNewColours()}makeNewColours(){document.querySelectorAll(".colour").forEach(e=>e.parentNode.removeChild(e));this.colours=[];for(var e=0;e<5;e++){const e=N();const t=A({classList:"colour"});t.style.background=P(e);t.onclick=(e=>{this.onClick(e.currentTarget)});this.target.appendChild(t);this.colours.push(e)}this.elements=document.querySelectorAll(".colour")}onClick(e){document.querySelectorAll(".colour.active").forEach(e=>{e.classList.remove("active")});e.classList.add("active");for(var t=0,i=this.elements.length;t<i;++t){if(this.elements[t]==e){this.client.setColour(this.colours[t]);break}}}setInitial(){this.client.setColour(this.colours[0]);document.querySelector(".colour").classList.add("active")}}class I{constructor(){this.now=(new Date).getTime();this.delta=0}update(){var e=(new Date).getTime();this.delta=(e-this.now)/1e3;this.now=e;return this.delta}}const w=["Nobody","Finger Painter","Doodler","Scribbler","Egg Painter","Bit Wrangler","Pixel Pusher","Connoisseur","Baller","L'Artiste","Patron of The Pixels","Recluse","Pica$$o","Server Crasher","Pretty Fly","Inseminator","Pencil Jesus","Pencil Satan","Pencil Buddha","The One Ring","Pulitzer Prize In Pixels","Nobel Prize In Pixels","GOAT","Palme d'Or","Ballon d'Or","No Lifer","Absolute Madman","1337 H4X0R"];function b(e){var t="";for(var i=0,a=w.length;i<a;++i){const a=i+1;const s=i*100;const o=a*100;if(e>=s&&e<o||i==w.length-1){t=w[i];break;wa}}return t}class R{constructor(e){this.config=o.client;this.url=e;this.state=new n;this.namePicker=new T(this);this.colourPicker=new L(this);this.console=new x(this);this.hud=new F;this.socket=new l(this);this.packet=new r(this.socket.getSocket());this.player=new c;this.peerManager=new p;this.pingEmitter=new h(this.config.emitPingRate,this.config.emitPingPeriod,()=>{this.packet.sendPing()});this.positionEmitter=new h(this.config.emitMovementRate,this.config.emitMovementPeriod,()=>{this.move()})}init(e,t){this.colourGrid=e.colourGrid;this.player.init(t.renderer.domElement,e.camera);this.on={};this.on[a.PEERS]=(e=>{this.peerManager.handleData(e)});this.on[a.PAINT]=(e=>{this.colourGrid.drawPixelArray(e)});this.on[a.STATE_REQUEST]=(e=>{this.packet.sendState(this.state.getPartJSON(e))});this.on[a.MESSAGE]=(e=>{this.console.printMessage(e.from,e.message)});this.on[a.NOTICE]=(e=>{this.console.printNotice(e.message)});this.on[a.PEER_DISCONNECT]=(e=>{this.peerManager.handlePeerDisconnect(e)});this.on[a.STATE]=(e=>{this.state.set(e);this.peerManager.setMyId(this.state.get("id"))});this.on[a.PING]=(e=>{this.packet.sendPong()});this.on[a.PONG]=(e=>{this.state.set({ping:new Date-new Date(e.timestamp)})});this.on[a.MAP]=(e=>{this.colourGrid.parseMap(e)})}onConnect(){this.peerManager.purge();this.packet.setSocket(this.socket.getSocket());this.colourPicker.setInitial()}handleMessage(e){if(typeof e.data=="string"){const t=JSON.parse(e.data);if(this.on[t.type]){this.on[t.type](t.data)}}else{}}update(e){this.player.update(e);this.peerManager.update(e);this.pingEmitter.update(e);this.positionEmitter.update(e)}setName(e){this.state.set({name:e});this.player.name=e;this.packet.sendSetName(e)}setColour(e){this.state.set({colour:e});this.player.colour=e;this.packet.sendSetColour(e)}move(){if(this.player.changed()){this.state.set({p:this.player.position,v:this.player.motion});this.packet.sendMove(this.state.get("p"),this.state.get("v"))}if(this.player.inNewGridCell()){const e=this.player.getGridCell();const t=this.colourGrid.getPixel(e.x,e.y);const i=this.state.get("colour");if(t!=null&&i!=null&&t!=i){const t=g(this.peerManager.getColoursInCell(e.x,e.y).concat(i));this.packet.sendPaint(e.x,e.y,t);this.colourGrid.drawPixelArray([{x:e.x,y:e.y,colour:t}]);this.state.set({cellsColoured:this.state.get("cellsColoured")+1});this.player.status=b(this.state.get("cellsColoured"))}}}}class U{constructor(e,t,i){this.hudSize=document.querySelector(".hud").getBoundingClientRect().width;this.cvs=document.createElement("canvas");this.ctx=this.cvs.getContext("2d");this.resize();this.cvs.classList.add("overlay-canvas");this.cvs.style.pointerEvents="none";document.body.appendChild(this.cvs);this.offsetY=-60;this.offsetPerLetter=1;this.textColour="#002";this.textOutlineColour="#aaa";this.step=o.global.grid.step;this.scene=e;this.camera=t;this.client=i;this.player=e.player}resize(){this.width=window.innerWidth-this.hudSize;this.height=window.innerHeight;this.centre={x:this.width/2,y:this.height/2};this.cvs.width=this.width;this.cvs.height=this.height}clear(){this.ctx.clearRect(0,0,this.cvs.width,this.cvs.height)}toScreenPosition(e){const t=e.clone();t.project(this.camera);return{x:this.centre.x*t.x+this.centre.x,y:-this.centre.y*t.y+this.centre.y}}renderWorldLabel(e,t){const i=this.toScreenPosition(e);const a=Math.floor(i.x-name.length*this.offsetPerLetter);const s=Math.floor(i.y+this.offsetY);this.ctx.fillStyle=this.textColour;this.ctx.fillText(t,a+.5,s+.5);this.ctx.fillStyle=this.textOutlineColour;this.ctx.fillText(t,a,s)}print(){for(var e=0;e<arguments.length;++e){const t=20;const i=30+e*20;this.ctx.fillStyle="#11c";this.ctx.fillText(arguments[e],t,i)}}render(e){this.clear();this.ctx.lineWidth=2;this.ctx.strokeStyle=this.textOutlineColour;const t=this.client.player.cursor.cell.clone();const i=this.toScreenPosition(t);const a=this.toScreenPosition(t.setX(t.x+this.step));const s=this.toScreenPosition(t.setZ(t.z+this.step));const o=this.toScreenPosition(t.setX(t.x-this.step));this.ctx.beginPath();this.ctx.moveTo(i.x,i.y);this.ctx.lineTo(a.x,a.y);this.ctx.lineTo(s.x,s.y);this.ctx.lineTo(o.x,o.y);this.ctx.closePath();this.ctx.stroke();if(this.client.player.waypoints.length>0){this.ctx.beginPath();var n=this.toScreenPosition(this.client.player.position);this.ctx.moveTo(n.x,n.y);for(var r=0,l=this.client.player.waypoints.length;r<l;++r){n=this.toScreenPosition(this.client.player.waypoints[r]);this.ctx.lineTo(n.x,n.y)}this.ctx.stroke()}this.ctx.font="12px Karla";const h=this.client.state.get("cellsColoured");this.print(`ping ${this.client.state.get("ping")}`,`pencils in server ${this.client.peerManager.peerCount+1}`,`cell ${this.client.player.cell.x}, ${this.client.player.cell.y}`,`cells filled ${h}`,`status: ${this.client.player.status}`);this.ctx.font="20px Karla";this.renderWorldLabel(this.scene.playerModel.group.position,this.scene.playerModel.label);for(var r=0,l=this.scene.peerModels.length;r<l;++r){this.renderWorldLabel(this.scene.peerModels[r].group.position,this.scene.peerModels[r].label)}}}var X=i(10);var M=i(9);var C=i(8);var O=i(7);var H=i(6);var Q=i(5);var Y=i(4);var z=i(3);var D=i(2);var k=i(1);class B{constructor(e,t){this.scene=e.scene;this.camera=e.camera;this.hudSize=document.querySelector(".hud").getBoundingClientRect().width;this.width=window.innerWidth-this.hudSize;this.height=window.innerHeight;this.size=new THREE.Vector2(this.width,this.height);this.renderer=new THREE.WebGLRenderer({antialias:true});this.renderer.setSize(this.width,this.height);this.renderer.setClearColor(11184810,1);this.postProcessing();this.renderer.domElement.id="canvas";document.body.appendChild(this.renderer.domElement);this.renderer2d=new U(e,this.camera,t)}resize(){this.width=window.innerWidth-this.hudSize;this.height=window.innerHeight;this.size.x=this.width;this.size.y=this.height;this.FXAAPass.uniforms["resolution"].value.set(1/this.width,1/this.height);this.bloomPass.setSize(this.width,this.height);this.renderer.setSize(this.width,this.height);this.composer.setSize(this.width,this.height);this.renderer2d.resize()}postProcessing(){const e=.28;const t=.16;const i=.97;this.renderPass=new THREE.RenderPass(this.scene,this.camera);this.FXAAPass=new THREE.ShaderPass(THREE.FXAAShader);this.FXAAPass.uniforms["resolution"].value.set(1/this.width,1/this.height);this.bloomPass=new THREE.UnrealBloomPass(this.size,e,t,i);this.composer=new THREE.EffectComposer(this.renderer);this.composer.setSize(this.width,this.height);this.composer.addPass(this.renderPass);this.composer.addPass(this.FXAAPass);this.composer.addPass(this.bloomPass);this.bloomPass.renderToScreen=true;this.renderer.gammaInput=true;this.renderer.gammaOutput=true}render(e){this.composer.render(e);this.renderer2d.render(e)}}class G{constructor(e,t){this.scene=e;this.client=t;this.size=o.global.grid.size;this.step=o.global.grid.step;this.width=this.height=this.size*this.step;this.map=null;this.mapped=false;this.cache=[];this.frameAge=0;this.frameInterval=1/20;this.swapBuffer=false;this.buffer=document.createElement("canvas");this.minimap=document.createElement("canvas");this.artwork=document.createElement("canvas");this.bufferCtx=this.buffer.getContext("2d");this.minimapCtx=this.minimap.getContext("2d");this.artworkCtx=this.artwork.getContext("2d");this.buffer.width=this.size;this.buffer.height=this.size;this.artwork.width=this.size;this.artwork.height=this.size;this.imageData=this.bufferCtx.getImageData(0,0,this.size,this.size);this.minimapTarget=document.querySelector("#map-target");this.artworkTarget=document.querySelector("#artwork-target");this.artworkOverlay=document.querySelector(".artwork-overlay");const i=this.minimapTarget.getBoundingClientRect();this.minimap.width=Math.floor(i.width);this.minimap.height=Math.floor(i.height);this.minimapTarget.appendChild(this.minimap);this.artworkTarget.appendChild(this.artwork);this.toggleArtwork=(()=>{this.artworkOverlay.style.top=window.innerHeight/2-this.size/2-32+"px";this.artworkOverlay.style.left=(window.innerWidth-300)/2-this.size/2-12+"px";this.artworkOverlay.classList.toggle("active")});this.minimap.onclick=(()=>{this.toggleArtwork()});document.querySelector("#artwork-close").onclick=(()=>{this.toggleArtwork()});this.minimapCtx.mozImageSmoothingEnabled=false;this.minimapCtx.webkitImageSmoothingEnabled=false;this.minimapCtx.msImageSmoothingEnabled=false;this.minimapCtx.imageSmoothingEnabled=false;this.artworkCtx.mozImageSmoothingEnabled=false;this.artworkCtx.webkitImageSmoothingEnabled=false;this.artworkCtx.msImageSmoothingEnabled=false;this.artworkCtx.imageSmoothingEnabled=false;this.plane=new THREE.Mesh(new THREE.PlaneBufferGeometry(this.width,this.height),new THREE.MeshBasicMaterial({}));this.plane.material.map=new THREE.Texture(this.buffer);this.plane.material.map.magFilter=THREE.NearestFilter;this.plane.material.map.needsUpdate=true;this.plane.rotation.x=-Math.PI/2;this.plane.position.y=0;this.scene.add(this.plane);this.clear()}clear(){this.bufferCtx.fillStyle="#fff";this.bufferCtx.fillRect(0,0,this.size,this.size);this.bufferCtx.fillStyle="#aaa";for(var e=0,t=this.size;e<t;++e){for(var i=0,a=this.size;i<a;++i){if((e+i)%2==0){this.bufferCtx.fillRect(e,i,1,1)}}}this.swapBuffer=true}drawPixelArray(e){for(var t=0,i=e.length;t<i;++t){this.setPixel(e[t].x,e[t].y,e[t].colour)}this.swapBuffer=true}setPixel(e,t,i){if(this.inBounds(e,t)){this.bufferCtx.fillStyle=P(i);this.bufferCtx.fillRect(e,t,1,1);const a=this.getIndex(e,t);if(a+3<this.imageData.data.length){this.imageData.data[a]=i>>16&255;this.imageData.data[a+1]=i>>8&255;this.imageData.data[a+2]=i&255}if(!this.mapped){this.cache.push({x:e,y:t,colour:i})}}}getIndex(e,t){return t*this.size+e<<2}getPixel(e,t){const i=this.getIndex(e,t);if(i>-1&&i+3<this.imageData.data.length){const e=this.imageData.data[i];const t=this.imageData.data[i+1];const a=this.imageData.data[i+2];return(e<<16)+(t<<8)+a}else{return null}}parseMap(e){e="data:image/png;base64,"+btoa(e);this.clear();this.map=new Image;this.map.onload=(()=>{this.bufferCtx.drawImage(this.map,0,0);this.history={};this.mapped=true;for(var e=this.cache.length-1;e>-1;--e){this.setPixel(this.cache[e].x,this.cache[e].y,this.cache[e].colour);this.cache.splice(e,1)}this.imageData=this.bufferCtx.getImageData(0,0,this.size,this.size);this.swapBuffer=true});this.map.src=e}inBounds(e,t){return e>-1&&t>-1&&e<this.size&&t<this.size}renderDisplay(e){this.frameAge+=e;if(this.frameAge>=this.frameInterval){this.frameAge=0;if(this.artworkOverlay.classList.contains("active")){this.artworkCtx.drawImage(this.buffer,0,0)}else{this.minimapCtx.fillStyle="#000";this.minimapCtx.strokeStyle="#22f";var t=7;var i=this.minimap.width/2;var a=this.minimap.height/2;var s=i-(this.client.player.position.x+this.client.player.halfBound)/this.step*t;var o=a-(this.client.player.position.z+this.client.player.halfBound)/this.step*t;this.minimapCtx.fillRect(0,0,this.minimap.width,this.minimap.height);this.minimapCtx.drawImage(this.buffer,s,o,this.buffer.width*t,this.buffer.height*t);this.minimapCtx.lineWidth=2;i+=t/2;a+=t/2;this.minimapCtx.strokeRect(i-t,a-t,t,t)}}}update(e){if(this.swapBuffer){this.plane.material.map.needsUpdate=true;this.swapBuffer=false}this.renderDisplay(e)}}class W{constructor(e){this.scene=e;this.isSet=false;this.label="";this.colour=0;this.adjust=.2;this.isSet=false;this.maxTilt=Math.PI/8;this.buildModel()}buildModel(){this.group=new THREE.Group;this.material={shade:new THREE.MeshPhongMaterial({}),wood:new THREE.MeshPhongMaterial({color:16755302})};const e=.5+Math.random()*.1;const t=1.5;const i=8+Math.random()*.25;const a=6;this.tube=new THREE.Mesh(new THREE.CylinderBufferGeometry(e,e,i-t,a),this.material.shade);this.shaft=new THREE.Mesh(new THREE.CylinderBufferGeometry(e,e/2,t/2,a,1,true),this.material.wood);this.tip=new THREE.Mesh(new THREE.CylinderBufferGeometry(e/2,0,t/2,a,1,true),this.material.shade);this.tube.position.y=(i-t)/2+t;this.shaft.position.y=t/2+t/4;this.tip.position.y=t/4;this.group.add(this.tube,this.shaft,this.tip);this.scene.add(this.group)}update(e){this.label=`${e.name}`;if(!this.isSet){this.isSet=true;this.group.position.set(e.position.x,e.position.y,e.position.z)}else{this.group.position.x+=(e.position.x-this.group.position.x)*this.adjust;this.group.position.z+=(e.position.z-this.group.position.z)*this.adjust}if(e.accel==0){this.group.rotation.z+=-this.group.rotation.z*this.adjust}else{this.group.rotation.z+=(this.maxTilt-this.group.rotation.z)*this.adjust;this.group.rotation.y+=f(this.group.rotation.y,Math.atan2(-e.motion.z,e.motion.x))*this.adjust}if(e.colour!=null&&this.colour!=e.colour){this.colour=e.colour;this.material.shade.color.set(e.colour)}}remove(){this.scene.remove(this.group)}}class V{constructor(e){this.scene=new THREE.Scene;this.colourGrid=new G(this.scene,e);this.playerModel=new W(this.scene);this.hudSize=document.querySelector(".hud").getBoundingClientRect().width;this.width=window.innerWidth-this.hudSize;this.height=window.innerHeight;this.ratio=this.width/this.height;this.size=20;const t=this.size*this.ratio;const i=this.size;this.camera=new THREE.OrthographicCamera(-t/2,t/2,i/2,-i/2,.1,1e3);this.offset=new THREE.Vector3(10,10,10);this.adjust=8;this.player=e.player;this.peerManager=e.peerManager;this.peerModels=[];this.camera.position.copy(this.player.position);this.camera.position.add(this.offset);this.camera.lookAt(this.player.position);const a=new THREE.AmbientLight(16777215,.125);const s=new THREE.DirectionalLight(16777215,.5);const o=new THREE.DirectionalLight(16777215,.25);s.position.set(1,.5,.5);o.position.set(-1,.25,-.5);this.scene.add(a,s,o)}updatePlayerObjects(){this.playerModel.update(this.player);const e=this.peerManager.getKeys();const t=e.length;if(t>this.peerModels.length){for(var i=0,a=t-this.peerModels.length;i<a;++i){this.peerModels.push(new W(this.scene))}}else if(t<this.peerModels.length){for(var i=0,a=this.peerModels.length-t;i<a;++i){const e=this.peerModels.length-1;this.peerModels[e].remove();this.peerModels.splice(e,1)}}for(var i=0,a=e.length;i<a;++i){if(this.peerModels.length>i){this.peerModels[i].update(this.peerManager.getPeer(e[i]))}}}update(e,t){const i=this.adjust*e;this.camera.position.set(this.camera.position.x+(this.player.position.x+this.offset.x-this.camera.position.x)*i,this.camera.position.y+(this.player.position.y+this.offset.y-this.camera.position.y)*i,this.camera.position.z+(this.player.position.z+this.offset.z-this.camera.position.z)*i);this.updatePlayerObjects();this.colourGrid.update(e)}resize(){this.hudSize=document.querySelector(".hud").getBoundingClientRect().width;this.width=window.innerWidth-this.hudSize;this.height=window.innerHeight;this.ratio=this.width/this.height;const e=this.size*this.ratio;const t=this.size;this.camera.left=e/-2;this.camera.right=e/2;this.camera.top=t/2;this.camera.bottom=t/-2;this.camera.updateProjectionMatrix()}}class q{constructor(){console.log("This project is open source! https://github.com/meatbags/mmommo");this.host=window.location.host;this.url=this.host==="localhost"?`ws://${window.location.host}:1337`:`wss://${window.location.host}:1337`;this.client=new R(this.url);this.scene=new V(this.client);this.renderer=new B(this.scene,this.client);this.timer=new I;this.client.init(this.scene,this.renderer);window.onresize=(()=>{this.scene.resize();this.renderer.resize()});this.loop()}loop(){requestAnimationFrame(()=>{this.loop()});var e=this.timer.update();this.client.update(e);this.scene.update(e);this.renderer.render(e)}}window.onload=(()=>{var e=new q})},function(e,t){THREE.DepthShader={uniforms:{},vertexShader:`\n    varying vec4 vModel;\n    varying vec3 vNormal;\n\n    void main() {\n      vNormal = normal;\n      vModel = modelMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n    }\n  `,fragmentShader:`\n    varying vec4 vModel;\n    varying vec3 vNormal;\n\n    void main() {\n      float minc = 0.0625;\n      float invc = 0.9375;\n\n      if (vModel.y <= 0.) {\n        gl_FragColor = vec4(minc, minc, minc, 1.0);\n      } else {\n        float t = (vModel.y >= 0.0) ? vModel.y / 3.0 : 0.0;\n        float d = (t <= 1.0) ? t : max(1.0 - 0.75 * (t - 1.0), 0.0);\n        d = d * invc + minc;\n        gl_FragColor = vec4(d, d, d, 1.0);\n      }\n    }\n  `}},function(e,t){const i=(new Date).getHours();const a="BLUE";const s="GOLD";const o="RED";let n=i<6||i>=21?a:i==12?s:o;if(window.location.hash=="#red"){n=o}else if(window.location.hash=="#blue"){n=a}else if(window.location.hash=="#gold"){n=s}THREE.MechanicsShader={uniforms:{time:{value:0},width:{value:100},height:{value:100},tDiffuse:{value:null}},vertexShader:`\n    varying vec2 vUv;\n\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,fragmentShader:`\n    #define PI 3.14159\n    #define UV_SCALE 0.02\n    #define MAX_HEIGHT 4.0\n\n    varying vec2 vUv;\n    uniform sampler2D tDiffuse;\n    uniform float time;\n\n    float rand(vec2 seed) {\n      return fract(sin(dot(seed.xy, vec2(12.9898,78.233))) * 43758.5453);\n    }\n\n    vec2 randVec2() {\n      return vec2(rand(vUv + time), rand(vUv + time + 1.));\n    }\n\n    vec3 getPosition(vec2 coords) {\n      vec4 sample = texture2D(tDiffuse, coords);\n      vec3 res = vec3(coords.x / UV_SCALE, sample.x * MAX_HEIGHT, coords.y / UV_SCALE);\n      return res;\n    }\n\n    float computeAO(vec2 uvOff, vec3 P, vec3 N) {\n      vec3 Vpos = getPosition(vUv + uvOff * UV_SCALE) - P;\n      vec3 Vnorm = normalize(Vpos);\n      float dist = length(Vpos);\n      return max(dot(N, Vnorm) * (1.0 / (1.0 + dist)), 0.0);\n    }\n\n    float sampleAO(vec3 P) {\n      vec3 N = vec3(0., 1., 0.);\n      vec2 randOffset = randVec2();\n      const int iterations = 4;\n      float totalAO = 0.0;\n\n      for (int i=0; i<iterations; i++) {\n        vec2 coord1 = reflect(vec2(\n          (i < 2) ? ((i == 0) ? 1.0 : -1.0) : 0.0,\n          (i > 1) ? ((i == 2) ? 1.0 : -1.0) : 0.0\n        ), randOffset);\n        vec2 coord2 = vec2(\n          coord1.x * 0.707 - coord1.y * 0.707,\n          coord1.x * 0.707 + coord1.y * 0.707\n        );\n        totalAO += computeAO(coord1 * 0.25, P, N);\n        totalAO += computeAO(coord2 * 0.5, P, N);\n        totalAO += computeAO(coord1 * 0.75, P, N);\n        totalAO += computeAO(coord2, P, N);\n      }\n\n      return (totalAO / (float(iterations) * 4.));\n    }\n\n    void main() {\n      float minc = 0.0625;\n      //float invc = 0.9375;\n\n      vec4 tex = texture2D(tDiffuse, vUv);\n      vec3 P = getPosition(vUv);\n      float ao = sampleAO(P);\n      vec4 frag = max(tex - ao, minc);\n\n      ${n==o?"frag.r += ao * 0.5;":n==a?"frag.g += ao * 0.2; frag.b += ao * 0.6;":"frag.r += ao * 0.3; frag.g += ao * 0.2;"}\n\n      gl_FragColor = frag;\n    }\n  `};THREE.MechanicsPass=function(e){THREE.Pass.call(this);this.shader=THREE.MechanicsShader;this.material=new THREE.ShaderMaterial(this.shader);this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),this.material);this.quad.frustumCulled=false;this.scene.add(this.quad);this.time=0};THREE.MechanicsPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.MechanicsPass,render:function(e,t,i,a,s){this.shader.uniforms["tDiffuse"].value=i.texture;this.time=(this.time+a)%10;this.shader.uniforms["time"].value=this.time;if(this.renderToScreen){e.render(this.scene,this.camera)}else{e.render(this.scene,this.camera,t,this.clear)}}})},function(e,t){THREE.UnrealBloomPass=function(e,t,i,a){THREE.Pass.call(this);this.strength=t!==undefined?t:1;this.radius=i;this.threshold=a;this.resolution=e!==undefined?new THREE.Vector2(e.x,e.y):new THREE.Vector2(256,256);var s={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargetsHorizontal=[];this.renderTargetsVertical=[];this.nMips=5;var o=Math.round(this.resolution.x/2);var n=Math.round(this.resolution.y/2);this.renderTargetBright=new THREE.WebGLRenderTarget(o,n,s);this.renderTargetBright.texture.name="UnrealBloomPass.bright";this.renderTargetBright.texture.generateMipmaps=false;for(var r=0;r<this.nMips;r++){var l=new THREE.WebGLRenderTarget(o,n,s);l.texture.name="UnrealBloomPass.h"+r;l.texture.generateMipmaps=false;this.renderTargetsHorizontal.push(l);var l=new THREE.WebGLRenderTarget(o,n,s);l.texture.name="UnrealBloomPass.v"+r;l.texture.generateMipmaps=false;this.renderTargetsVertical.push(l);o=Math.round(o/2);n=Math.round(n/2)}if(THREE.LuminosityHighPassShader===undefined)console.error("THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader");var h=THREE.LuminosityHighPassShader;this.highPassUniforms=THREE.UniformsUtils.clone(h.uniforms);this.highPassUniforms["luminosityThreshold"].value=a;this.highPassUniforms["smoothWidth"].value=.01;this.materialHighPassFilter=new THREE.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,defines:{}});this.separableBlurMaterials=[];var d=[3,5,7,9,11];var o=Math.round(this.resolution.x/2);var n=Math.round(this.resolution.y/2);for(var r=0;r<this.nMips;r++){this.separableBlurMaterials.push(this.getSeperableBlurMaterial(d[r]));this.separableBlurMaterials[r].uniforms["texSize"].value=new THREE.Vector2(o,n);o=Math.round(o/2);n=Math.round(n/2)}this.compositeMaterial=this.getCompositeMaterial(this.nMips);this.compositeMaterial.uniforms["blurTexture1"].value=this.renderTargetsVertical[0].texture;this.compositeMaterial.uniforms["blurTexture2"].value=this.renderTargetsVertical[1].texture;this.compositeMaterial.uniforms["blurTexture3"].value=this.renderTargetsVertical[2].texture;this.compositeMaterial.uniforms["blurTexture4"].value=this.renderTargetsVertical[3].texture;this.compositeMaterial.uniforms["blurTexture5"].value=this.renderTargetsVertical[4].texture;this.compositeMaterial.uniforms["bloomStrength"].value=t;this.compositeMaterial.uniforms["bloomRadius"].value=.1;this.compositeMaterial.needsUpdate=true;var f=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms["bloomFactors"].value=f;this.bloomTintColors=[new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1)];this.compositeMaterial.uniforms["bloomTintColors"].value=this.bloomTintColors;if(THREE.CopyShader===undefined){console.error("THREE.BloomPass relies on THREE.CopyShader")}var u=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(u.uniforms);this.copyUniforms["opacity"].value=1;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:THREE.AdditiveBlending,depthTest:false,depthWrite:false,transparent:true});this.enabled=true;this.needsSwap=false;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.basic=new THREE.MeshBasicMaterial;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=false;this.scene.add(this.quad)};THREE.UnrealBloomPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.UnrealBloomPass,dispose:function(){for(var e=0;e<this.renderTargetsHorizontal.length;e++){this.renderTargetsHorizontal[e].dispose()}for(var e=0;e<this.renderTargetsVertical.length;e++){this.renderTargetsVertical[e].dispose()}this.renderTargetBright.dispose()},setSize:function(e,t){var i=Math.round(e/2);var a=Math.round(t/2);this.renderTargetBright.setSize(i,a);for(var s=0;s<this.nMips;s++){this.renderTargetsHorizontal[s].setSize(i,a);this.renderTargetsVertical[s].setSize(i,a);this.separableBlurMaterials[s].uniforms["texSize"].value=new THREE.Vector2(i,a);i=Math.round(i/2);a=Math.round(a/2)}},render:function(e,t,i,a,s){this.oldClearColor.copy(e.getClearColor());this.oldClearAlpha=e.getClearAlpha();var o=e.autoClear;e.autoClear=false;e.setClearColor(new THREE.Color(0,0,0),0);if(s)e.context.disable(e.context.STENCIL_TEST);if(this.renderToScreen){this.quad.material=this.basic;this.basic.map=i.texture;e.render(this.scene,this.camera,undefined,true)}this.highPassUniforms["tDiffuse"].value=i.texture;this.highPassUniforms["luminosityThreshold"].value=this.threshold;this.quad.material=this.materialHighPassFilter;e.render(this.scene,this.camera,this.renderTargetBright,true);var n=this.renderTargetBright;for(var r=0;r<this.nMips;r++){this.quad.material=this.separableBlurMaterials[r];this.separableBlurMaterials[r].uniforms["colorTexture"].value=n.texture;this.separableBlurMaterials[r].uniforms["direction"].value=THREE.UnrealBloomPass.BlurDirectionX;e.render(this.scene,this.camera,this.renderTargetsHorizontal[r],true);this.separableBlurMaterials[r].uniforms["colorTexture"].value=this.renderTargetsHorizontal[r].texture;this.separableBlurMaterials[r].uniforms["direction"].value=THREE.UnrealBloomPass.BlurDirectionY;e.render(this.scene,this.camera,this.renderTargetsVertical[r],true);n=this.renderTargetsVertical[r]}this.quad.material=this.compositeMaterial;this.compositeMaterial.uniforms["bloomStrength"].value=this.strength;this.compositeMaterial.uniforms["bloomRadius"].value=this.radius;this.compositeMaterial.uniforms["bloomTintColors"].value=this.bloomTintColors;e.render(this.scene,this.camera,this.renderTargetsHorizontal[0],true);this.quad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=this.renderTargetsHorizontal[0].texture;if(s)e.context.enable(e.context.STENCIL_TEST);if(this.renderToScreen){e.render(this.scene,this.camera,undefined,false)}else{e.render(this.scene,this.camera,i,false)}e.setClearColor(this.oldClearColor,this.oldClearAlpha);e.autoClear=o},getSeperableBlurMaterial:function(e){return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:e,SIGMA:e},uniforms:{colorTexture:{value:null},texSize:{value:new THREE.Vector2(.5,.5)},direction:{value:new THREE.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})},getCompositeMaterial:function(e){return new THREE.ShaderMaterial({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}});THREE.UnrealBloomPass.BlurDirectionX=new THREE.Vector2(1,0);THREE.UnrealBloomPass.BlurDirectionY=new THREE.Vector2(0,1)},function(e,t){THREE.ShaderPass=function(e,t){THREE.Pass.call(this);this.textureID=t!==undefined?t:"tDiffuse";if(e instanceof THREE.ShaderMaterial){this.uniforms=e.uniforms;this.material=e}else if(e){this.uniforms=THREE.UniformsUtils.clone(e.uniforms);this.material=new THREE.ShaderMaterial({defines:e.defines||{},uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})}this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=false;this.scene.add(this.quad)};THREE.ShaderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.ShaderPass,render:function(e,t,i,a,s){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=i.texture}this.quad.material=this.material;if(this.renderToScreen){e.render(this.scene,this.camera)}else{e.render(this.scene,this.camera,t,this.clear)}}})},function(e,t){THREE.RenderPass=function(e,t,i,a,s){THREE.Pass.call(this);this.scene=e;this.camera=t;this.overrideMaterial=i;this.clearColor=a;this.clearAlpha=s!==undefined?s:0;this.clear=true;this.clearDepth=false;this.needsSwap=false};THREE.RenderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.RenderPass,render:function(e,t,i,a,s){var o=e.autoClear;e.autoClear=false;this.scene.overrideMaterial=this.overrideMaterial;var n,r;if(this.clearColor){n=e.getClearColor().getHex();r=e.getClearAlpha();e.setClearColor(this.clearColor,this.clearAlpha)}if(this.clearDepth){e.clearDepth()}e.render(this.scene,this.camera,this.renderToScreen?null:i,this.clear);if(this.clearColor){e.setClearColor(n,r)}this.scene.overrideMaterial=null;e.autoClear=o}})},function(e,t){window.mobilecheck=function(){var e=false;(function(t){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))e=true})(navigator.userAgent||navigator.vendor||window.opera);return e}},function(e,t){THREE.LuminosityHighPassShader={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{type:"t",value:null},luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:1},defaultColor:{type:"c",value:new THREE.Color(0)},defaultOpacity:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec3 defaultColor;","uniform float defaultOpacity;","uniform float luminosityThreshold;","uniform float smoothWidth;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( texel.xyz, luma );","vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );","float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );","gl_FragColor = mix( outputColor, texel, alpha );","}"].join("\n")}},function(e,t){THREE.FXAAShader={uniforms:{tDiffuse:{value:null},resolution:{value:new THREE.Vector2(1/1024,1/512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","","uniform sampler2D tDiffuse;","","uniform vec2 resolution;","","varying vec2 vUv;","","// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)","","//----------------------------------------------------------------------------------","// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag","// SDK Version: v3.00","// Email:       gameworks@nvidia.com","// Site:        http://developer.nvidia.com/","//","// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.","//","// Redistribution and use in source and binary forms, with or without","// modification, are permitted provided that the following conditions","// are met:","//  * Redistributions of source code must retain the above copyright","//    notice, this list of conditions and the following disclaimer.","//  * Redistributions in binary form must reproduce the above copyright","//    notice, this list of conditions and the following disclaimer in the","//    documentation and/or other materials provided with the distribution.","//  * Neither the name of NVIDIA CORPORATION nor the names of its","//    contributors may be used to endorse or promote products derived","//    from this software without specific prior written permission.","//","// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY","// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE","// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR","// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR","// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,","// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,","// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR","// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY","// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT","// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE","// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","//","//----------------------------------------------------------------------------------","","#define FXAA_PC 1","#define FXAA_GLSL_100 1","#define FXAA_QUALITY_PRESET 12","","#define FXAA_GREEN_AS_LUMA 1","","/*--------------------------------------------------------------------------*/","#ifndef FXAA_PC_CONSOLE","    //","    // The console algorithm for PC is included","    // for developers targeting really low spec machines.","    // Likely better to just run FXAA_PC, and use a really low preset.","    //","    #define FXAA_PC_CONSOLE 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GLSL_120","    #define FXAA_GLSL_120 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GLSL_130","    #define FXAA_GLSL_130 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_3","    #define FXAA_HLSL_3 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_4","    #define FXAA_HLSL_4 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_5","    #define FXAA_HLSL_5 0","#endif","/*==========================================================================*/","#ifndef FXAA_GREEN_AS_LUMA","    //","    // For those using non-linear color,","    // and either not able to get luma in alpha, or not wanting to,","    // this enables FXAA to run using green as a proxy for luma.","    // So with this enabled, no need to pack luma in alpha.","    //","    // This will turn off AA on anything which lacks some amount of green.","    // Pure red and blue or combination of only R and B, will get no AA.","    //","    // Might want to lower the settings for both,","    //    fxaaConsoleEdgeThresholdMin","    //    fxaaQualityEdgeThresholdMin","    // In order to insure AA does not get turned off on colors","    // which contain a minor amount of green.","    //","    // 1 = On.","    // 0 = Off.","    //","    #define FXAA_GREEN_AS_LUMA 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_EARLY_EXIT","    //","    // Controls algorithm's early exit path.","    // On PS3 turning this ON adds 2 cycles to the shader.","    // On 360 turning this OFF adds 10ths of a millisecond to the shader.","    // Turning this off on console will result in a more blurry image.","    // So this defaults to on.","    //","    // 1 = On.","    // 0 = Off.","    //","    #define FXAA_EARLY_EXIT 1","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_DISCARD","    //","    // Only valid for PC OpenGL currently.","    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.","    //","    // 1 = Use discard on pixels which don't need AA.","    //     For APIs which enable concurrent TEX+ROP from same surface.","    // 0 = Return unchanged color on pixels which don't need AA.","    //","    #define FXAA_DISCARD 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_FAST_PIXEL_OFFSET","    //","    // Used for GLSL 120 only.","    //","    // 1 = GL API supports fast pixel offsets","    // 0 = do not use fast pixel offsets","    //","    #ifdef GL_EXT_gpu_shader4","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifdef GL_NV_gpu_shader5","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifdef GL_ARB_gpu_shader5","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifndef FXAA_FAST_PIXEL_OFFSET","        #define FXAA_FAST_PIXEL_OFFSET 0","    #endif","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GATHER4_ALPHA","    //","    // 1 = API supports gather4 on alpha channel.","    // 0 = API does not support gather4 on alpha channel.","    //","    #if (FXAA_HLSL_5 == 1)","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifdef GL_ARB_gpu_shader5","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifdef GL_NV_gpu_shader5","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifndef FXAA_GATHER4_ALPHA","        #define FXAA_GATHER4_ALPHA 0","    #endif","#endif","","","/*============================================================================","                        FXAA QUALITY - TUNING KNOBS","------------------------------------------------------------------------------","NOTE the other tuning knobs are now in the shader function inputs!","============================================================================*/","#ifndef FXAA_QUALITY_PRESET","    //","    // Choose the quality preset.","    // This needs to be compiled into the shader as it effects code.","    // Best option to include multiple presets is to","    // in each shader define the preset, then include this file.","    //","    // OPTIONS","    // -----------------------------------------------------------------------","    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)","    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)","    // 39       - no dither, very expensive","    //","    // NOTES","    // -----------------------------------------------------------------------","    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)","    // 13 = about same speed as FXAA 3.9 and better than 12","    // 23 = closest to FXAA 3.9 visually and performance wise","    //  _ = the lowest digit is directly related to performance","    // _  = the highest digit is directly related to style","    //","    #define FXAA_QUALITY_PRESET 12","#endif","","","/*============================================================================","","                           FXAA QUALITY - PRESETS","","============================================================================*/","","/*============================================================================","                     FXAA QUALITY - MEDIUM DITHER PRESETS","============================================================================*/","#if (FXAA_QUALITY_PRESET == 10)","    #define FXAA_QUALITY_PS 3","    #define FXAA_QUALITY_P0 1.5","    #define FXAA_QUALITY_P1 3.0","    #define FXAA_QUALITY_P2 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 11)","    #define FXAA_QUALITY_PS 4","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 3.0","    #define FXAA_QUALITY_P3 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 12)","    #define FXAA_QUALITY_PS 5","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 4.0","    #define FXAA_QUALITY_P4 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 13)","    #define FXAA_QUALITY_PS 6","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 4.0","    #define FXAA_QUALITY_P5 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 14)","    #define FXAA_QUALITY_PS 7","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 4.0","    #define FXAA_QUALITY_P6 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 15)","    #define FXAA_QUALITY_PS 8","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 4.0","    #define FXAA_QUALITY_P7 12.0","#endif","","/*============================================================================","                     FXAA QUALITY - LOW DITHER PRESETS","============================================================================*/","#if (FXAA_QUALITY_PRESET == 20)","    #define FXAA_QUALITY_PS 3","    #define FXAA_QUALITY_P0 1.5","    #define FXAA_QUALITY_P1 2.0","    #define FXAA_QUALITY_P2 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 21)","    #define FXAA_QUALITY_PS 4","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 22)","    #define FXAA_QUALITY_PS 5","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 23)","    #define FXAA_QUALITY_PS 6","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 24)","    #define FXAA_QUALITY_PS 7","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 3.0","    #define FXAA_QUALITY_P6 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 25)","    #define FXAA_QUALITY_PS 8","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 4.0","    #define FXAA_QUALITY_P7 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 26)","    #define FXAA_QUALITY_PS 9","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 4.0","    #define FXAA_QUALITY_P8 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 27)","    #define FXAA_QUALITY_PS 10","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 4.0","    #define FXAA_QUALITY_P9 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 28)","    #define FXAA_QUALITY_PS 11","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 4.0","    #define FXAA_QUALITY_P10 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 29)","    #define FXAA_QUALITY_PS 12","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 2.0","    #define FXAA_QUALITY_P10 4.0","    #define FXAA_QUALITY_P11 8.0","#endif","","/*============================================================================","                     FXAA QUALITY - EXTREME QUALITY","============================================================================*/","#if (FXAA_QUALITY_PRESET == 39)","    #define FXAA_QUALITY_PS 12","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.0","    #define FXAA_QUALITY_P2 1.0","    #define FXAA_QUALITY_P3 1.0","    #define FXAA_QUALITY_P4 1.0","    #define FXAA_QUALITY_P5 1.5","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 2.0","    #define FXAA_QUALITY_P10 4.0","    #define FXAA_QUALITY_P11 8.0","#endif","","","","/*============================================================================","","                                API PORTING","","============================================================================*/","#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)","    #define FxaaBool bool","    #define FxaaDiscard discard","    #define FxaaFloat float","    #define FxaaFloat2 vec2","    #define FxaaFloat3 vec3","    #define FxaaFloat4 vec4","    #define FxaaHalf float","    #define FxaaHalf2 vec2","    #define FxaaHalf3 vec3","    #define FxaaHalf4 vec4","    #define FxaaInt2 ivec2","    #define FxaaSat(x) clamp(x, 0.0, 1.0)","    #define FxaaTex sampler2D","#else","    #define FxaaBool bool","    #define FxaaDiscard clip(-1)","    #define FxaaFloat float","    #define FxaaFloat2 float2","    #define FxaaFloat3 float3","    #define FxaaFloat4 float4","    #define FxaaHalf half","    #define FxaaHalf2 half2","    #define FxaaHalf3 half3","    #define FxaaHalf4 half4","    #define FxaaSat(x) saturate(x)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_100 == 1)","  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)","  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_120 == 1)","    // Requires,","    //  #version 120","    // And at least,","    //  #extension GL_EXT_gpu_shader4 : enable","    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)","    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)","    #if (FXAA_FAST_PIXEL_OFFSET == 1)","        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)","    #else","        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)","    #endif","    #if (FXAA_GATHER4_ALPHA == 1)","        // use #extension GL_ARB_gpu_shader5 : enable","        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)","        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)","        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)","        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)","    #endif","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_130 == 1)",'    // Requires "#version 130" or better',"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)","    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)","    #if (FXAA_GATHER4_ALPHA == 1)","        // use #extension GL_ARB_gpu_shader5 : enable","        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)","        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)","        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)","        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)","    #endif","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_3 == 1)","    #define FxaaInt2 float2","    #define FxaaTex sampler2D","    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))","    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_4 == 1)","    #define FxaaInt2 int2","    struct FxaaTex { SamplerState smpl; Texture2D tex; };","    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)","    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_5 == 1)","    #define FxaaInt2 int2","    struct FxaaTex { SamplerState smpl; Texture2D tex; };","    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)","    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)","    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)","    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)","    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)","    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)","#endif","","","/*============================================================================","                   GREEN AS LUMA OPTION SUPPORT FUNCTION","============================================================================*/","#if (FXAA_GREEN_AS_LUMA == 0)","    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }","#else","    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }","#endif","","","","","/*============================================================================","","                             FXAA3 QUALITY - PC","","============================================================================*/","#if (FXAA_PC == 1)","/*--------------------------------------------------------------------------*/","FxaaFloat4 FxaaPixelShader(","    //","    // Use noperspective interpolation here (turn off perspective interpolation).","    // {xy} = center of pixel","    FxaaFloat2 pos,","    //","    // Used only for FXAA Console, and not used on the 360 version.","    // Use noperspective interpolation here (turn off perspective interpolation).","    // {xy_} = upper left of pixel","    // {_zw} = lower right of pixel","    FxaaFloat4 fxaaConsolePosPos,","    //","    // Input color texture.","    // {rgb_} = color in linear or perceptual color space","    // if (FXAA_GREEN_AS_LUMA == 0)","    //     {__a} = luma in perceptual color space (not linear)","    FxaaTex tex,","    //","    // Only used on the optimized 360 version of FXAA Console.",'    // For everything but 360, just use the same input here as for "tex".',"    // For 360, same texture, just alias with a 2nd sampler.","    // This sampler needs to have an exponent bias of -1.","    FxaaTex fxaaConsole360TexExpBiasNegOne,","    //","    // Only used on the optimized 360 version of FXAA Console.",'    // For everything but 360, just use the same input here as for "tex".',"    // For 360, same texture, just alias with a 3nd sampler.","    // This sampler needs to have an exponent bias of -2.","    FxaaTex fxaaConsole360TexExpBiasNegTwo,","    //","    // Only used on FXAA Quality.","    // This must be from a constant/uniform.","    // {x_} = 1.0/screenWidthInPixels","    // {_y} = 1.0/screenHeightInPixels","    FxaaFloat2 fxaaQualityRcpFrame,","    //","    // Only used on FXAA Console.","    // This must be from a constant/uniform.","    // This effects sub-pixel AA quality and inversely sharpness.","    //   Where N ranges between,","    //     N = 0.50 (default)","    //     N = 0.33 (sharper)","    // {x__} = -N/screenWidthInPixels","    // {_y_} = -N/screenHeightInPixels","    // {_z_} =  N/screenWidthInPixels","    // {__w} =  N/screenHeightInPixels","    FxaaFloat4 fxaaConsoleRcpFrameOpt,","    //","    // Only used on FXAA Console.","    // Not used on 360, but used on PS3 and PC.","    // This must be from a constant/uniform.","    // {x__} = -2.0/screenWidthInPixels","    // {_y_} = -2.0/screenHeightInPixels","    // {_z_} =  2.0/screenWidthInPixels","    // {__w} =  2.0/screenHeightInPixels","    FxaaFloat4 fxaaConsoleRcpFrameOpt2,","    //","    // Only used on FXAA Console.","    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.","    // This must be from a constant/uniform.","    // {x__} =  8.0/screenWidthInPixels","    // {_y_} =  8.0/screenHeightInPixels","    // {_z_} = -4.0/screenWidthInPixels","    // {__w} = -4.0/screenHeightInPixels","    FxaaFloat4 fxaaConsole360RcpFrameOpt2,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_SUBPIX define.","    // It is here now to allow easier tuning.","    // Choose the amount of sub-pixel aliasing removal.","    // This can effect sharpness.","    //   1.00 - upper limit (softer)","    //   0.75 - default amount of filtering","    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)","    //   0.25 - almost off","    //   0.00 - completely off","    FxaaFloat fxaaQualitySubpix,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.","    // It is here now to allow easier tuning.","    // The minimum amount of local contrast required to apply algorithm.","    //   0.333 - too little (faster)","    //   0.250 - low quality","    //   0.166 - default","    //   0.125 - high quality","    //   0.063 - overkill (slower)","    FxaaFloat fxaaQualityEdgeThreshold,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.","    // It is here now to allow easier tuning.","    // Trims the algorithm from processing darks.","    //   0.0833 - upper limit (default, the start of visible unfiltered edges)","    //   0.0625 - high quality (faster)","    //   0.0312 - visible limit (slower)","    // Special notes when using FXAA_GREEN_AS_LUMA,","    //   Likely want to set this to zero.","    //   As colors that are mostly not-green","    //   will appear very dark in the green channel!","    //   Tune by looking at mostly non-green content,","    //   then start at zero and increase until aliasing is a problem.","    FxaaFloat fxaaQualityEdgeThresholdMin,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.","    // It is here now to allow easier tuning.","    // This does not effect PS3, as this needs to be compiled in.","    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.","    //   Due to the PS3 being ALU bound,","    //   there are only three safe values here: 2 and 4 and 8.","    //   These options use the shaders ability to a free *|/ by 2|4|8.","    // For all other platforms can be a non-power of two.","    //   8.0 is sharper (default!!!)","    //   4.0 is softer","    //   2.0 is really soft (good only for vector graphics inputs)","    FxaaFloat fxaaConsoleEdgeSharpness,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.","    // It is here now to allow easier tuning.","    // This does not effect PS3, as this needs to be compiled in.","    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.","    //   Due to the PS3 being ALU bound,","    //   there are only two safe values here: 1/4 and 1/8.","    //   These options use the shaders ability to a free *|/ by 2|4|8.","    // The console setting has a different mapping than the quality setting.","    // Other platforms can use other values.","    //   0.125 leaves less aliasing, but is softer (default!!!)","    //   0.25 leaves more aliasing, and is sharper","    FxaaFloat fxaaConsoleEdgeThreshold,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.","    // It is here now to allow easier tuning.","    // Trims the algorithm from processing darks.","    // The console setting has a different mapping than the quality setting.","    // This only applies when FXAA_EARLY_EXIT is 1.","    // This does not apply to PS3,","    // PS3 was simplified to avoid more shader instructions.","    //   0.06 - faster but more aliasing in darks","    //   0.05 - default","    //   0.04 - slower and less aliasing in darks","    // Special notes when using FXAA_GREEN_AS_LUMA,","    //   Likely want to set this to zero.","    //   As colors that are mostly not-green","    //   will appear very dark in the green channel!","    //   Tune by looking at mostly non-green content,","    //   then start at zero and increase until aliasing is a problem.","    FxaaFloat fxaaConsoleEdgeThresholdMin,","    //","    // Extra constants for 360 FXAA Console only.","    // Use zeros or anything else for other platforms.","    // These must be in physical constant registers and NOT immedates.","    // Immedates will result in compiler un-optimizing.","    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)","    FxaaFloat4 fxaaConsole360ConstDir",") {","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posM;","    posM.x = pos.x;","    posM.y = pos.y;","    #if (FXAA_GATHER4_ALPHA == 1)","        #if (FXAA_DISCARD == 0)","            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);","            #if (FXAA_GREEN_AS_LUMA == 0)","                #define lumaM rgbyM.w","            #else","                #define lumaM rgbyM.y","            #endif","        #endif","        #if (FXAA_GREEN_AS_LUMA == 0)","            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);","            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));","        #else","            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);","            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));","        #endif","        #if (FXAA_DISCARD == 1)","            #define lumaM luma4A.w","        #endif","        #define lumaE luma4A.z","        #define lumaS luma4A.x","        #define lumaSE luma4A.y","        #define lumaNW luma4B.w","        #define lumaN luma4B.z","        #define lumaW luma4B.x","    #else","        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);","        #if (FXAA_GREEN_AS_LUMA == 0)","            #define lumaM rgbyM.w","        #else","            #define lumaM rgbyM.y","        #endif","        #if (FXAA_GLSL_100 == 1)","          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));","        #else","          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));","        #endif","    #endif","/*--------------------------------------------------------------------------*/","    FxaaFloat maxSM = max(lumaS, lumaM);","    FxaaFloat minSM = min(lumaS, lumaM);","    FxaaFloat maxESM = max(lumaE, maxSM);","    FxaaFloat minESM = min(lumaE, minSM);","    FxaaFloat maxWN = max(lumaN, lumaW);","    FxaaFloat minWN = min(lumaN, lumaW);","    FxaaFloat rangeMax = max(maxWN, maxESM);","    FxaaFloat rangeMin = min(minWN, minESM);","    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;","    FxaaFloat range = rangeMax - rangeMin;","    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);","    FxaaBool earlyExit = range < rangeMaxClamped;","/*--------------------------------------------------------------------------*/","    if(earlyExit)","        #if (FXAA_DISCARD == 1)","            FxaaDiscard;","        #else","            return rgbyM;","        #endif","/*--------------------------------------------------------------------------*/","    #if (FXAA_GATHER4_ALPHA == 0)","        #if (FXAA_GLSL_100 == 1)","          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));","        #else","          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));","        #endif","    #else","        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));","        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));","    #endif","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNS = lumaN + lumaS;","    FxaaFloat lumaWE = lumaW + lumaE;","    FxaaFloat subpixRcpRange = 1.0/range;","    FxaaFloat subpixNSWE = lumaNS + lumaWE;","    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;","    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNESE = lumaNE + lumaSE;","    FxaaFloat lumaNWNE = lumaNW + lumaNE;","    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;","    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNWSW = lumaNW + lumaSW;","    FxaaFloat lumaSWSE = lumaSW + lumaSE;","    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);","    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);","    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;","    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;","    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;","    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;","/*--------------------------------------------------------------------------*/","    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;","    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;","    FxaaBool horzSpan = edgeHorz >= edgeVert;","    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;","/*--------------------------------------------------------------------------*/","    if(!horzSpan) lumaN = lumaW;","    if(!horzSpan) lumaS = lumaE;","    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;","    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;","/*--------------------------------------------------------------------------*/","    FxaaFloat gradientN = lumaN - lumaM;","    FxaaFloat gradientS = lumaS - lumaM;","    FxaaFloat lumaNN = lumaN + lumaM;","    FxaaFloat lumaSS = lumaS + lumaM;","    FxaaBool pairN = abs(gradientN) >= abs(gradientS);","    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));","    if(pairN) lengthSign = -lengthSign;","    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posB;","    posB.x = posM.x;","    posB.y = posM.y;","    FxaaFloat2 offNP;","    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;","    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;","    if(!horzSpan) posB.x += lengthSign * 0.5;","    if( horzSpan) posB.y += lengthSign * 0.5;","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posN;","    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;","    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;","    FxaaFloat2 posP;","    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;","    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;","    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;","    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));","    FxaaFloat subpixE = subpixC * subpixC;","    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));","/*--------------------------------------------------------------------------*/","    if(!pairN) lumaNN = lumaSS;","    FxaaFloat gradientScaled = gradient * 1.0/4.0;","    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;","    FxaaFloat subpixF = subpixD * subpixE;","    FxaaBool lumaMLTZero = lumaMM < 0.0;","/*--------------------------------------------------------------------------*/","    lumaEndN -= lumaNN * 0.5;","    lumaEndP -= lumaNN * 0.5;","    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;","    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;","    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;","    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;","    FxaaBool doneNP = (!doneN) || (!doneP);","    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;","    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;","/*--------------------------------------------------------------------------*/","    if(doneNP) {","        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","        doneN = abs(lumaEndN) >= gradientScaled;","        doneP = abs(lumaEndP) >= gradientScaled;","        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;","        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;","        doneNP = (!doneN) || (!doneP);","        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;","        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;","/*--------------------------------------------------------------------------*/","        #if (FXAA_QUALITY_PS > 3)","        if(doneNP) {","            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","            doneN = abs(lumaEndN) >= gradientScaled;","            doneP = abs(lumaEndP) >= gradientScaled;","            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;","            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;","            doneNP = (!doneN) || (!doneP);","            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;","            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;","/*--------------------------------------------------------------------------*/","            #if (FXAA_QUALITY_PS > 4)","            if(doneNP) {","                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                doneN = abs(lumaEndN) >= gradientScaled;","                doneP = abs(lumaEndP) >= gradientScaled;","                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;","                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;","                doneNP = (!doneN) || (!doneP);","                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;","                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;","/*--------------------------------------------------------------------------*/","                #if (FXAA_QUALITY_PS > 5)","                if(doneNP) {","                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                    doneN = abs(lumaEndN) >= gradientScaled;","                    doneP = abs(lumaEndP) >= gradientScaled;","                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;","                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;","                    doneNP = (!doneN) || (!doneP);","                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;","                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;","/*--------------------------------------------------------------------------*/","                    #if (FXAA_QUALITY_PS > 6)","                    if(doneNP) {","                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                        doneN = abs(lumaEndN) >= gradientScaled;","                        doneP = abs(lumaEndP) >= gradientScaled;","                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;","                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;","                        doneNP = (!doneN) || (!doneP);","                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;","                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;","/*--------------------------------------------------------------------------*/","                        #if (FXAA_QUALITY_PS > 7)","                        if(doneNP) {","                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                            doneN = abs(lumaEndN) >= gradientScaled;","                            doneP = abs(lumaEndP) >= gradientScaled;","                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;","                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;","                            doneNP = (!doneN) || (!doneP);","                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;","                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;","/*--------------------------------------------------------------------------*/","    #if (FXAA_QUALITY_PS > 8)","    if(doneNP) {","        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","        doneN = abs(lumaEndN) >= gradientScaled;","        doneP = abs(lumaEndP) >= gradientScaled;","        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;","        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;","        doneNP = (!doneN) || (!doneP);","        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;","        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;","/*--------------------------------------------------------------------------*/","        #if (FXAA_QUALITY_PS > 9)","        if(doneNP) {","            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","            doneN = abs(lumaEndN) >= gradientScaled;","            doneP = abs(lumaEndP) >= gradientScaled;","            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;","            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;","            doneNP = (!doneN) || (!doneP);","            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;","            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;","/*--------------------------------------------------------------------------*/","            #if (FXAA_QUALITY_PS > 10)","            if(doneNP) {","                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                doneN = abs(lumaEndN) >= gradientScaled;","                doneP = abs(lumaEndP) >= gradientScaled;","                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;","                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;","                doneNP = (!doneN) || (!doneP);","                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;","                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;","/*--------------------------------------------------------------------------*/","                #if (FXAA_QUALITY_PS > 11)","                if(doneNP) {","                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                    doneN = abs(lumaEndN) >= gradientScaled;","                    doneP = abs(lumaEndP) >= gradientScaled;","                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;","                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;","                    doneNP = (!doneN) || (!doneP);","                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;","                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;","/*--------------------------------------------------------------------------*/","                    #if (FXAA_QUALITY_PS > 12)","                    if(doneNP) {","                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                        doneN = abs(lumaEndN) >= gradientScaled;","                        doneP = abs(lumaEndP) >= gradientScaled;","                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;","                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;","                        doneNP = (!doneN) || (!doneP);","                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;","                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;","/*--------------------------------------------------------------------------*/","                    }","                    #endif","/*--------------------------------------------------------------------------*/","                }","                #endif","/*--------------------------------------------------------------------------*/","            }","            #endif","/*--------------------------------------------------------------------------*/","        }","        #endif","/*--------------------------------------------------------------------------*/","    }","    #endif","/*--------------------------------------------------------------------------*/","                        }","                        #endif","/*--------------------------------------------------------------------------*/","                    }","                    #endif","/*--------------------------------------------------------------------------*/","                }","                #endif","/*--------------------------------------------------------------------------*/","            }","            #endif","/*--------------------------------------------------------------------------*/","        }","        #endif","/*--------------------------------------------------------------------------*/","    }","/*--------------------------------------------------------------------------*/","    FxaaFloat dstN = posM.x - posN.x;","    FxaaFloat dstP = posP.x - posM.x;","    if(!horzSpan) dstN = posM.y - posN.y;","    if(!horzSpan) dstP = posP.y - posM.y;","/*--------------------------------------------------------------------------*/","    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;","    FxaaFloat spanLength = (dstP + dstN);","    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;","    FxaaFloat spanLengthRcp = 1.0/spanLength;","/*--------------------------------------------------------------------------*/","    FxaaBool directionN = dstN < dstP;","    FxaaFloat dst = min(dstN, dstP);","    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;","    FxaaFloat subpixG = subpixF * subpixF;","    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;","    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;","/*--------------------------------------------------------------------------*/","    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;","    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);","    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;","    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;","    #if (FXAA_DISCARD == 1)","        return FxaaTexTop(tex, posM);","    #else","        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);","    #endif","}","/*==========================================================================*/","#endif","","void main() {","  gl_FragColor = FxaaPixelShader(","    vUv,","    vec4(0.0),","    tDiffuse,","    tDiffuse,","    tDiffuse,","    resolution,","    vec4(0.0),","    vec4(0.0),","    vec4(0.0),","    0.75,","    0.166,","    0.0833,","    0.0,","    0.0,","    0.0,","    vec4(0.0)","  );","","  // TODO avoid querying texture twice for same texel","  gl_FragColor.a = texture2D(tDiffuse, vUv).a;","}"].join("\n")}},function(e,t){THREE.EffectComposer=function(e,t){this.renderer=e;if(t===undefined){var i={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:false};var a=e.getDrawingBufferSize();t=new THREE.WebGLRenderTarget(a.width,a.height,i);t.texture.name="EffectComposer.rt1"}this.renderTarget1=t;this.renderTarget2=t.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];if(THREE.CopyShader===undefined){console.error("THREE.EffectComposer relies on THREE.CopyShader")}if(THREE.ShaderPass===undefined){console.error("THREE.EffectComposer relies on THREE.ShaderPass")}this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=e},addPass:function(e){this.passes.push(e);var t=this.renderer.getDrawingBufferSize();e.setSize(t.width,t.height)},insertPass:function(e,t){this.passes.splice(t,0,e)},render:function(e){var t=false;var i,a,s=this.passes.length;for(a=0;a<s;a++){i=this.passes[a];if(i.enabled===false)continue;i.render(this.renderer,this.writeBuffer,this.readBuffer,e,t);if(i.needsSwap){if(t){var o=this.renderer.context;o.stencilFunc(o.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e);o.stencilFunc(o.EQUAL,1,4294967295)}this.swapBuffers()}if(THREE.MaskPass!==undefined){if(i instanceof THREE.MaskPass){t=true}else if(i instanceof THREE.ClearMaskPass){t=false}}}},reset:function(e){if(e===undefined){var t=this.renderer.getDrawingBufferSize();e=this.renderTarget1.clone();e.setSize(t.width,t.height)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=e;this.renderTarget2=e.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(e,t){this.renderTarget1.setSize(e,t);this.renderTarget2.setSize(e,t);for(var i=0;i<this.passes.length;i++){this.passes[i].setSize(e,t)}}});THREE.Pass=function(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false};Object.assign(THREE.Pass.prototype,{setSize:function(e,t){},render:function(e,t,i,a,s){console.error("THREE.Pass: .render() must be implemented in derived pass.")}})},function(e,t){THREE.CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")}}]);